import os
import time
import pandas as pd
import numpy as np
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from scipy.stats import norm


# Telegram Configuration
TELEGRAM_BOT_TOKEN = '7528354342:AAG2iRNqpNgSEhykp6WuUf5XSVlVAWGVu80'
TELEGRAM_CHAT_ID = '-1001155462245'
VALUE_BET_THRESHOLD = 0.00  # Change this value as needed

# File paths (Will be passed explicitly)
TIPP_FILE_PATH = "GT_tippmix.xlsx"
TIPP_SHEET_NAME = "Sheet1"
LOOKUP_TABLE_PATH = "GT_League.xlsx"
LOOKUP_SHEET_NAME = "ZSD 12d"

# Function to scrape Tippmix data
def scrape_tippmix(driver, wait, url):
    """ Scrapes Tippmix data using Selenium WebDriver. """
    Games, HomeOdds, DrawOdds, AwayOdds = [], [], [], []

    for page in range(1, 2):
        driver.get(url + str(page))
        driver.refresh()
        time.sleep(2)

        try:
            button = wait.until(EC.element_to_be_clickable((By.XPATH, "//*[@id='js-accept-all']")))
            button.click()
        except:
            pass  # Ignore if no button found

        for game in range(1, 21):
            try:
                Game = driver.find_element(By.XPATH, f"//*[@id='wrapper']/main/section/div/div[2]/table/tbody/tr[{game}]/td[4]/a").text
                HO = driver.find_element(By.XPATH, f"//*[@id='wrapper']/main/section/div/div[2]/table/tbody/tr[{game}]/td[5]/div/button/span").text
                DO = driver.find_element(By.XPATH, f"//*[@id='wrapper']/main/section/div/div[2]/table/tbody/tr[{game}]/td[6]/div/button/span").text
                AO = driver.find_element(By.XPATH, f"//*[@id='wrapper']/main/section/div/div[2]/table/tbody/tr[{game}]/td[7]/div/button/span").text

                Games.append(Game)
                HomeOdds.append(HO)
                DrawOdds.append(DO)
                AwayOdds.append(AO)
            except:
                break  # Stop if no more matches

    Match = [item.split('\n')[1] for item in Games if 'GT' in item]
    HomeTeam = [item.split('(')[1].split(')')[0] for item in Games if 'GT' in item]
    AwayTeam = [item.split('(')[2].split(')')[0] for item in Games if 'GT' in item]
    Date = [game[-12:] for game in Games]

    HomeOdd = [item2[:4].replace(",", ".") for item1, item2 in zip(Games, HomeOdds) if 'GT' in item1]
    DrawOdd = [item2[:4].replace(",", ".") for item1, item2 in zip(Games, DrawOdds) if 'GT' in item1]
    AwayOdd = [item2[:4].replace(",", ".") for item1, item2 in zip(Games, AwayOdds) if 'GT' in item1]

    df = pd.DataFrame(list(zip(Date, HomeTeam, AwayTeam, HomeOdd, DrawOdd, AwayOdd)),
                      columns=['Date', 'HomeTeam', 'AwayTeam', 'HomeOdd', 'DrawOdd', 'AwayOdd'])

    df['Date'] = [date[:6] + str(21) + date[6:] for date in df['Date']]
    df['Date'] = pd.to_datetime(df['Date'])

    df.insert(loc=2, column='blank3', value=['' for _ in range(df.shape[0])])
    df.insert(loc=2, column='blank2', value=['' for _ in range(df.shape[0])])
    df.insert(loc=1, column='blank1', value=['' for _ in range(df.shape[0])])

    return df


def load_lookup_table(file_path, sheet_name):
    df = pd.read_excel(file_path, sheet_name=sheet_name, usecols="AI:AK", skiprows=6)
    df = df.dropna(how="all")
    df.columns = ["TEAM", "Home", "Away"]

    lookup_dict = df.set_index("TEAM")[["Home", "Away"]].to_dict(orient="index")

    return lookup_dict


def load_excel_values(file_path, sheet_name):
    """ Load specific cell values from the Excel file """
    df = pd.read_excel(file_path, sheet_name=sheet_name, header=None)
    values = {
        "VAR": df.iloc[1, 6],
        "AVG": df.iloc[1, 7],
        "SD": df.iloc[1, 8],
        "Error": df.iloc[2, 1],
        "HomeAdj": df.iloc[3, 6],
        "AwayAdj": df.iloc[3, 7]
    }
    return values


def calculate_team_advantage(home_team, away_team, lookup_table, excel_values):
    """
    Calculate the Z-score advantage, MOV (Margin of Victory), and estimated win probabilities 
    for both home and away teams.

    :param home_team: Name of the home team
    :param away_team: Name of the away team
    :param lookup_table: Dictionary from the loaded Excel lookup table
    :param excel_values: Dictionary of extracted Excel values
    :return: Dictionary with computed Z-scores, MOV, and win probabilities for home & away teams
    """
    # Extract necessary values from the Excel data
    home_adj = excel_values.get("HomeAdj", 0)
    away_adj = excel_values.get("AwayAdj", 0)
    avg = excel_values.get("AVG", 0)
    sd = excel_values.get("SD", 1)  # Default to 1 to avoid division issues if SD is 0
    error = excel_values.get("Error", 1)  # Default to 1 if missing to avoid division by zero
    
    # Normalize team names to avoid mismatches
    home_team = home_team.strip()
    away_team = away_team.strip()
    
    # Fetch lookup values correctly
    home_team_home_value = lookup_table.get(home_team, {}).get("Home", 0)  # Home team at home
    home_team_away_value = lookup_table.get(home_team, {}).get("Away", 0)  # Home team at home
    away_team_home_value = lookup_table.get(away_team, {}).get("Home", 0)  # Away team playing away
    away_team_away_value = lookup_table.get(away_team, {}).get("Away", 0)  # Away team playing away
    

    # Compute parameter estimates correctly
    par_est_home = home_adj + home_team_home_value - away_team_home_value
    par_est_away = away_adj + home_team_away_value - away_team_away_value
    

    # Compute probability using the logistic function
    prob_home = np.exp(par_est_home) / (1 + np.exp(par_est_home))
    prob_away = np.exp(par_est_away) / (1 + np.exp(par_est_away))

    # Apply the inverse normal distribution function (NORMSINV)
    zscore_home = norm.ppf(prob_home)
    zscore_away = norm.ppf(prob_away)

    # Compute Margin of Victory (MOV)
    mov = (avg + zscore_home * sd) - (avg + zscore_away * sd)

    # Compute estimated win probabilities
    estimated_win_home = 1 - norm.cdf(0.5, loc=mov, scale=error)
    estimated_win_away = 1 - norm.cdf(0.5, loc=-mov, scale=error)  # Negative MOV for away team

    return {
        "Estimated_Home_Win_Prob": estimated_win_home,
        "Estimated_Away_Win_Prob": estimated_win_away
    }


def load_tippmix_data(file_path, sheet_name):
    """
    Load match data from the GT_tippmix Excel file, including Date/Time.

    :param file_path: Path to the GT_tippmix Excel file
    :param sheet_name: Sheet name containing match data
    :return: DataFrame with extracted columns
    """
    df = pd.read_excel(file_path, sheet_name=sheet_name, usecols="A,C,F,G,I")  # Include Date/Time
    df.columns = ["DateTime", "HomeTeam", "AwayTeam", "HomeTeamOdd", "AwayTeamOdd"]  # Rename columns
    df["DateTime"] = pd.to_datetime(df["DateTime"], errors="coerce")  # Convert to datetime format
    return df


def analyze_value_bets(tippmix_df, lookup_table, excel_values):
    """
    Analyze betting odds and compare estimated probabilities with bookmakers' odds.

    :param tippmix_df: DataFrame containing match data from GT_tippmix
    :param lookup_table: Dictionary from the loaded Excel lookup table
    :param excel_values: Dictionary of extracted Excel values
    :return: DataFrame with match results, computed probabilities, and betting odds comparison
    """
    results = []

    for _, row in tippmix_df.iterrows():
        date_time = row["DateTime"]  # Extract match date/time
        home_team = row["HomeTeam"]
        away_team = row["AwayTeam"]
        home_team_odd = row["HomeTeamOdd"]
        away_team_odd = row["AwayTeamOdd"]

        # Compute estimated probabilities
        match_results = calculate_team_advantage(home_team, away_team, lookup_table, excel_values)

        # Convert bookmaker odds to implied probability
        implied_home_prob = 1 / home_team_odd if home_team_odd > 0 else 0
        implied_away_prob = 1 / away_team_odd if away_team_odd > 0 else 0

        # Compute value bets
        home_value = home_team_odd * match_results["Estimated_Home_Win_Prob"] - 1
        away_value = away_team_odd * match_results["Estimated_Away_Win_Prob"] - 1

        # Store results
        results.append({
            "DateTime": date_time,  # Include match date/time
            "Home Team": home_team,
            "Away Team": away_team,
            "Home Team Odd": home_team_odd,
            "Away Team Odd": away_team_odd,
            "Estimated Home Win Prob": match_results["Estimated_Home_Win_Prob"],
            "Implied Home Win Prob": implied_home_prob,
            "Home Value Bet": home_value,  # Positive value means it's a value bet
            "Estimated Away Win Prob": match_results["Estimated_Away_Win_Prob"],
            "Implied Away Win Prob": implied_away_prob,
            "Away Value Bet": away_value  # Positive value means it's a value bet
        })

    # Convert to DataFrame and return
    results_df = pd.DataFrame(results)

    return results_df


def send_telegram_alerts(results_df):
    for _, row in results_df.iterrows():
        if row["Home Value Bet"] > VALUE_BET_THRESHOLD or row["Away Value Bet"] > VALUE_BET_THRESHOLD:
            recommended_bet = "Home" if row["Home Value Bet"] > row["Away Value Bet"] else "Away"
            bet_odd = row["Home Team Odd"] if recommended_bet == "Home" else row["Away Team Odd"]
            value_bet = round(max(row['Home Value Bet'], row['Away Value Bet']), 2)  # Keep two decimal places
            
            message = (f"⚽ Value Bet Alert! ⚽\n"
                       f"Date: {row['DateTime']}\n"
                       f"Home: {row['Home Team']}\n"
                       f"Away: {row['Away Team']}\n"
                       f"Recommended Bet: {recommended_bet}\n"
                       f"Odd: {bet_odd}\n"
                       f"Value Bet: {value_bet}")
            
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            params = {
                "chat_id": TELEGRAM_CHAT_ID,
                "text": message
            }
            
            response = requests.get(url, params=params)
            print("Telegram Response:", response.json())  # Debugging output


def run_algorithm(tippmix_file_path, tippmix_sheet_name, lookup_table_path, lookup_sheet_name):
    """ Runs the entire scraping, processing, and alerting workflow every 30 minutes. """

    webdriver_service = Service(r'C:\Users\markr\Documents\Python\chromedriver.exe')
    driver = webdriver.Chrome(service=webdriver_service)
    wait = WebDriverWait(driver, 1)

    os.chdir(r'C:\Users\markr\Dropbox\Esoccer GT')
    url = 'https://www.tippmix.hu/sportfogadas#?sportid=999&countryid=99999988&competitiontype=undefined&page='

    # Run the scraper and save the DataFrame
    df = scrape_tippmix(driver, wait, url)
    df.to_excel(tippmix_file_path, encoding='utf-8', index=False)

    # Load lookup table and Excel values
    lookup_table = load_lookup_table(lookup_table_path, lookup_sheet_name)  # Now passing arguments
    excel_values = load_excel_values(lookup_table_path, lookup_sheet_name)  # Now passing arguments

    # Load match data from GT_tippmix (including Date/Time)
    tippmix_df = load_tippmix_data(tippmix_file_path, tippmix_sheet_name)

    # Analyze value bets (Explicitly pass `lookup_table` and `excel_values`)
    value_bet_analysis = analyze_value_bets(tippmix_df, lookup_table, excel_values)
    value_bet_analysis.to_excel("value_bet_analysis.xlsx", index=False)

    # Send Telegram Alerts
    results_df = pd.read_excel("value_bet_analysis.xlsx")
    send_telegram_alerts(results_df)

    # Properly close the WebDriver session
    print("Closing WebDriver session.")
    driver.quit()


while True:
    try:
        print("\n🔄 Running Algorithm...")
        
        # Run the algorithm with file paths as arguments
        run_algorithm(TIPP_FILE_PATH, TIPP_SHEET_NAME, LOOKUP_TABLE_PATH, LOOKUP_SHEET_NAME)
        
        print("⏳ Waiting for 30 minutes before next run...\n")
        time.sleep(100)  # Wait for 1800 seconds (30 minutes)

    except Exception as e:
        print(f"❌ ERROR in the main loop: {e}")
        break  # If there's an error, break the loop
